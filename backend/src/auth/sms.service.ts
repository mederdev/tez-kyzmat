import { Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import axios from "axios";

@Injectable()
export class SmsService {
  private readonly logger = new Logger(SmsService.name);

  constructor(private configService: ConfigService) {}

  async sendSms(phone: string, message: string): Promise<boolean> {
    try {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–¥
      // if (this.configService.get<string>("NODE_ENV") === "development") {
      //   this.logger.log(`üì± SMS –∫–æ–¥ –¥–ª—è ${phone}: ${message}`);
      //   return true;
      // }

      // –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Nikita.kg XML API
      return await this.sendViaNikitaKg(phone, message);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: ${error.message}`);
      return false;
    }
  }

  private async sendViaNikitaKg(
    phone: string,
    message: string
  ): Promise<boolean> {
    try {
      const login = this.configService.get<string>("SMS_LOGIN");
      const password = this.configService.get<string>("SMS_PASSWORD");
      const sender =
        this.configService.get<string>("SMS_SENDER") || "TezKyzmat";
      const apiUrl =
        this.configService.get<string>("SMS_API_URL") ||
        "https://smspro.nikita.kg/api/message";

      if (!login || !password) {
        this.logger.error("SMS_LOGIN –∏–ª–∏ SMS_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
        return false;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageId = this.generateMessageId();

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º + –µ—Å–ª–∏ –µ—Å—Ç—å)
      const formattedPhone = phone.replace("+", "");

      // –°–æ–∑–¥–∞–µ–º XML –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Nikita.kg
      const xmlBody = this.createXmlRequest({
        login,
        password,
        messageId,
        sender,
        text: message,
        phone: formattedPhone,
        test:
          this.configService.get<string>("NODE_ENV") === "development"
            ? "1"
            : "0",
      });

      this.logger.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Nikita.kg –Ω–∞ ${phone}`);

      const response = await axios.post(apiUrl, xmlBody, {
        headers: {
          "Content-Type": "application/xml; charset=UTF-8",
        },
        timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      // –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç
      const success = this.parseResponse(response.data);

      if (success) {
        this.logger.log(
          `‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone} (ID: ${messageId})`
        );
      } else {
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –Ω–∞ ${phone}: ${response.data}`
        );
      }

      return success;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ Nikita.kg API: ${error.message}`);
      return false;
    }
  }

  private createXmlRequest(params: {
    login: string;
    password: string;
    messageId: string;
    sender: string;
    text: string;
    phone: string;
    test: string;
  }): string {
    return `<?xml version="1.0" encoding="UTF-8"?>
<message>
  <login>${params.login}</login>
  <pwd>${params.password}</pwd>
  <id>${params.messageId}</id>
  <sender>${params.sender}</sender>
  <text>${params.text}</text>
  <phones>
    <phone>${params.phone}</phone>
  </phones>
  <test>${params.test}</test>
</message>`;
  }

  private parseResponse(xmlResponse: string): boolean {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–ª–∏—á–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å XML –ø–∞—Ä—Å–µ—Ä
      return (
        xmlResponse.includes("<status>") &&
        !xmlResponse.includes("<error>") &&
        !xmlResponse.includes("ERROR")
      );
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
      return false;
    }
  }

  private generateMessageId(): string {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª–∏–Ω–æ–π –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let result = "";
    for (let i = 0; i < 12; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  async sendWhatsApp(phone: string, message: string): Promise<boolean> {
    try {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–¥
      if (this.configService.get<string>("NODE_ENV") === "development") {
        this.logger.log(`üí¨ WhatsApp –∫–æ–¥ –¥–ª—è ${phone}: ${message}`);
        return true;
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å WhatsApp Business API
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
      this.logger.log(`WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${phone}`);
      return true;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp: ${error.message}`);
      return false;
    }
  }

  generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Nikita.kg API

  async checkBalance(): Promise<number | null> {
    try {
      const login = this.configService.get<string>("SMS_LOGIN");
      const password = this.configService.get<string>("SMS_PASSWORD");

      if (!login || !password) {
        return null;
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
      this.logger.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ SMS...");
      return null;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
      return null;
    }
  }

  async getDeliveryStatus(messageId: string): Promise<string | null> {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
      this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}...`);
      return null;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
      return null;
    }
  }
}
